buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'javafx-gradle-plugin'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def outputDir = 'build/jfx'

def applicationVersion
def specificationVersion
def implementationVersion

def nowDate = new Date()
def timestampBuild = nowDate.format('yyyy-MM-dd HH:mm:ss')

def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
def gitCommit = 'git rev-parse --verify HEAD'.execute().text.trim()

task createVersionString {
    specificationVersion = '0.1'
    implementationVersion = '1'
}

jfx {
    mainClass = 'the.issue99.example.MainApplication'
    jfxAppOutputDir = 'build/jfx'
    jfxMainAppJarName = 'JavaFX-Gradle-Plugin-Issue99-Example v' + specificationVersion + '.' + implementationVersion + '.jar'
    vendor = 'BoGnY'
    manifestAttributes = [
        "Specification-Version": specificationVersion,
        "Implementation-Version": implementationVersion,
        "Built-By": "BoGnY",
        "Built-On": timestampBuild,
        "Git-Branch": gitBranch,
        "Git-Revision": gitCommit
    ]
}

task copyDependencies(type: Copy) {
    from('.') {
        include '/README.md'
    }
    into outputDir
}

task buildJfxJarWithDep {
    description 'This is a workaround task to solve JavaFX Gradle plugin problem with custom task after :jfxJar'
    group 'jfx'
}

// With only this line the task order is not correctly
jfxJar.dependsOn createVersionString, copyDependencies

// With this three lines, if I start task :buildJfxJarWithDep the task order will be almost correctly
/*
jfxJar.dependsOn createVersionString
copyDependencies.dependsOn jfxJar
buildJfxJarWithDep.dependsOn copyDependencies
*/



// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'the.issue99.example.MainApplication'
}
